{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from 'firebase';\nimport config from \"./config\";\nfirebase.initializeApp(config);\nimport link from \"./link\";\nimport Axios from 'axios';\nvar db = firebase.database();\nexport var auth = firebase.auth;\nexport var firestore = firebase.firestore;\nexport var sendMessage = function sendMessage(message, roomId) {\n  db.ref('/chat/' + roomId).set(message);\n  return;\n};\nexport var getMessages = function getMessages(back, roomId) {\n  db.ref('texting/' + roomId).on('value', function (payload) {\n    back(payload.val());\n  });\n};\nexport var waitingList = function waitingList(userId) {\n  return _regeneratorRuntime.async(function waitingList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Axios.post(link + 'waitingList', {\n            uid: userId\n          }));\n\n        case 3:\n          Promise.resolve('done');\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error in waitingList', _context.t0);\n          Promise.reject(new Error(_context.t0));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\nexport var getRoomId = function getRoomId(uid, setRoom) {\n  return _regeneratorRuntime.async(function getRoomId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          firebase.firestore().collection(\"users\").doc(uid).onSnapshot(function (data) {\n            data = data.data();\n\n            if (data.roomId) {\n              setRoom(data.roomId);\n              console.log(data.roomId);\n            }\n          });\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/yazeed/Documents/coding/apps/textingApp/nativeApp/firebase.js"],"names":["firebase","config","initializeApp","link","Axios","db","database","auth","firestore","sendMessage","message","roomId","ref","set","getMessages","back","on","payload","val","waitingList","userId","post","uid","Promise","resolve","console","log","reject","Error","getRoomId","setRoom","collection","doc","onSnapshot","data"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP;AACAD,QAAQ,CAACE,aAAT,CAAuBD,MAAvB;AAEA,OAAOE,IAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,EAAE,GAAGL,QAAQ,CAACM,QAAT,EAAX;AACA,OAAO,IAAMC,IAAI,GAAGP,QAAQ,CAACO,IAAtB;AACP,OAAO,IAAMC,SAAS,GAAGR,QAAQ,CAACQ,SAA3B;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAUC,MAAV,EAAqB;AAG5CN,EAAAA,EAAE,CAACO,GAAH,CAAO,WAASD,MAAhB,EAAwBE,GAAxB,CAA4BH,OAA5B;AACA;AACH,CALM;AAMP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOJ,MAAP,EAAkB;AACzCN,EAAAA,EAAE,CAACO,GAAH,CAAO,aAAWD,MAAlB,EAA0BK,EAA1B,CAA6B,OAA7B,EAAqC,UAACC,OAAD,EAAW;AACrCF,IAAAA,IAAI,CAACE,OAAO,CAACC,GAAR,EAAD,CAAJ;AACV,GAFD;AAGH,CAJM;AAmBP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGbhB,KAAK,CAACiB,IAAN,CAAWlB,IAAI,GAAC,aAAhB,EAA8B;AAChCmB,YAAAA,GAAG,EAAEF;AAD2B,WAA9B,CAHa;;AAAA;AAMnBG,UAAAA,OAAO,CAACC,OAAR,CAAgB,MAAhB;AANmB;AAAA;;AAAA;AAAA;AAAA;AASnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAH,UAAAA,OAAO,CAACI,MAAR,CAAe,IAAIC,KAAJ,aAAf;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAiBP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOP,GAAP,EAAYQ,OAAZ;AAAA;AAAA;AAAA;AAAA;AACrB9B,UAAAA,QAAQ,CAACQ,SAAT,GAAqBuB,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6CV,GAA7C,EAAkDW,UAAlD,CAA6D,UAAAC,IAAI,EAAG;AAChEA,YAAAA,IAAI,GAAGA,IAAI,CAACA,IAAL,EAAP;;AACA,gBAAGA,IAAI,CAACvB,MAAR,EAAe;AACXmB,cAAAA,OAAO,CAACI,IAAI,CAACvB,MAAN,CAAP;AACAc,cAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACvB,MAAjB;AAEH;AACJ,WAPD;;AADqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import firebase from 'firebase'\nimport config from './config'\nfirebase.initializeApp(config)\n\nimport link from './link'\nimport Axios from 'axios'\nconst db = firebase.database()\nexport const auth = firebase.auth\nexport const firestore = firebase.firestore\nexport const sendMessage = (message, roomId) => {\n\n   \n    db.ref('/chat/'+roomId).set(message)\n    return; \n}\nexport const getMessages = (back, roomId) => { \n    db.ref('texting/'+roomId).on('value',(payload)=>{\n               back(payload.val())\n    })\n}\n// export const createRoom = async () => { \n//     let key = firebase().database().ref('').child('chat').push().key\n//     let ref = firebase.database.ref() \n//     let update = {}\n\n//     update['chat/'+ key] = []\n    \n//     ref.update(update).then(data => {\n//         Promise.resolve({id: key})\n//     })\n\n\n// }\n\nexport const waitingList = async (userId) => {\n    try{ \n        // await firebase.firestore().collection('waitingList').doc(userId).set({userId})\n        await Axios.post(link+'waitingList',{ \n            uid: userId ,\n        })\n        Promise.resolve('done')\n    }\n    catch (err){ \n        console.log('error in waitingList', err);\n        Promise.reject(new Error(err))\n        \n    }\n    \n\n}\n\nexport const getRoomId = async (uid, setRoom)=> {\n    firebase.firestore().collection(\"users\").doc(uid).onSnapshot(data=> {\n        data = data.data()\n        if(data.roomId){\n            setRoom(data.roomId)\n            console.log(data.roomId);\n            \n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}