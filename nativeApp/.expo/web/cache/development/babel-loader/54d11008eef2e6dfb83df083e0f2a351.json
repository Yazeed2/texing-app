{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from 'firebase';\nimport config from \"./config\";\nfirebase.initializeApp(config);\nimport link from \"./link\";\nimport Axios from 'axios';\nvar db = firebase.database();\nexport var auth = firebase.auth;\nexport var firestore = firebase.firestore;\nexport var sendMessage = function sendMessage(message) {\n  db.ref('/chat').set(message);\n  return;\n};\nexport var getMessages = function getMessages(back) {\n  db.ref('texting').on('value', function (payload) {\n    console.log(payload.val());\n    back(payload.val());\n  });\n};\nexport var waitingList = function waitingList(userId) {\n  return _regeneratorRuntime.async(function waitingList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Axios.post(link + 'waitingList', {\n            uid: userId\n          }));\n\n        case 3:\n          Promise.resolve('done');\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error in waitingList', _context.t0);\n          Promise.reject(new Error('Something went wrong I can feel It :( (probably firebase)'));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};","map":{"version":3,"sources":["/Users/yazeed/Documents/coding/apps/textingApp/nativeApp/firebase.js"],"names":["firebase","config","initializeApp","link","Axios","db","database","auth","firestore","sendMessage","message","ref","set","getMessages","back","on","payload","console","log","val","waitingList","userId","post","uid","Promise","resolve","reject","Error"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP;AACAD,QAAQ,CAACE,aAAT,CAAuBD,MAAvB;AAEA,OAAOE,IAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,EAAE,GAAGL,QAAQ,CAACM,QAAT,EAAX;AACA,OAAO,IAAMC,IAAI,GAAGP,QAAQ,CAACO,IAAtB;AACP,OAAO,IAAMC,SAAS,GAAGR,QAAQ,CAACQ,SAA3B;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAa;AAGpCL,EAAAA,EAAE,CAACM,GAAH,CAAO,OAAP,EAAgBC,GAAhB,CAAoBF,OAApB;AACA;AACH,CALM;AAMP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjCT,EAAAA,EAAE,CAACM,GAAH,CAAO,SAAP,EAAkBI,EAAlB,CAAqB,OAArB,EAA6B,UAACC,OAAD,EAAW;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,GAAR,EAAZ;AAEDL,IAAAA,IAAI,CAACE,OAAO,CAACG,GAAR,EAAD,CAAJ;AACF,GAJD;AAKH,CANM;AAqBP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGbjB,KAAK,CAACkB,IAAN,CAAWnB,IAAI,GAAC,aAAhB,EAA8B;AAChCoB,YAAAA,GAAG,EAAEF;AAD2B,WAA9B,CAHa;;AAAA;AAMnBG,UAAAA,OAAO,CAACC,OAAR,CAAgB,MAAhB;AANmB;AAAA;;AAAA;AAAA;AAAA;AASnBR,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAM,UAAAA,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAU,2DAAV,CAAf;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import firebase from 'firebase'\nimport config from './config'\nfirebase.initializeApp(config)\n\nimport link from './link'\nimport Axios from 'axios'\nconst db = firebase.database()\nexport const auth = firebase.auth\nexport const firestore = firebase.firestore\nexport const sendMessage = (message) => {\n\n   \n    db.ref('/chat').set(message)\n    return; \n}\nexport const getMessages = (back) => { \n    db.ref('texting').on('value',(payload)=>{\n        console.log(payload.val());\n        \n       back(payload.val())\n    })\n}\n// export const createRoom = async () => { \n//     let key = firebase().database().ref('').child('chat').push().key\n//     let ref = firebase.database.ref() \n//     let update = {}\n\n//     update['chat/'+ key] = []\n    \n//     ref.update(update).then(data => {\n//         Promise.resolve({id: key})\n//     })\n\n\n// }\n\nexport const waitingList = async (userId) => {\n    try{ \n        // await firebase.firestore().collection('waitingList').doc(userId).set({userId})\n        await Axios.post(link+'waitingList',{ \n            uid: userId ,\n        })\n        Promise.resolve('done')\n    }\n    catch (err){ \n        console.log('error in waitingList', err);\n        Promise.reject(new Error('Something went wrong I can feel It :( (probably firebase)'))\n        \n    }\n    \n\n}"]},"metadata":{},"sourceType":"module"}